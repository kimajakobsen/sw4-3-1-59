const int healthToReproduce = 10;
int time;

Carnivore
{
	int health;
	Sex sex;
	
	constructor(int speed, int health, Position location, Sex sex) //If the arguments in the constructor are not used, it tries to apply them automatically
	{}
	
	Move(Herbivore closestPrey, Herb closestHerb, Carnivore closestAlly)
	{
		if(time%9 == 0)
		{
			--healt;
		}
		
		if(health <= 0)
		{
			die();
		}
		//Neural network??
		location = ...
	}
	
	OnEncounter(Herb h)
	{
		
	}
	
	OnEncounter(Carnivore c)
	{
		if(sex == female && c.sex == male)
		{
			if(health > healthToReproduce)
			{
				Carnivore.Combine(this,c);
				health -= 5;
			}
		}
		else if(sex != c.sex && c.hasReproduced)
		{
			health -= 5;
		}
	}
	
	OnEncounter(Herbivore h)
	{
		health += 3;
	}
}

Herbivore
{
	int health;
	Sex sex;
	
	constructor(int speed, int health, Position location, Sex sex)
	{}
	
	Move(Herbivore closestAlly, Herb closestFood, Carnivore closestEnemy)
	{
		if(time%9 == 0)
		{
			--healt;
		}
		
		if(health <= 0)
		{
			die();
		}
		//Neural network??
		location = ...
	}
	
	OnEncounter(Herb h)
	{
		health += 3;
	}
	
	OnEncounter(Carnivore c)
	{
		die();
	}
	
	OnEncounter(Herbivore h)
	{
		if(sex == female && c.sex == male)
		{
			if(health > healthToReproduce)
			{
				Herbivore.Combine(this,c);
				health -= 5;
			}
		}
		else if(sex != c.sex && c.hasReproduced)
		{
			health -= 5;
		}
	}
}

Herb
{
	Move()
	{}
	
	constructor(Position location)
	{}
	
	OnEncounter(Herb h)
	{
		
	}
	
	OnEncounter(Carnivore c)
	{
		
	}
	
	OnEncounter(Herbivore h)
	{
		
	}
}

Environment
{
	
	
	Setup()
	{
		for(int i = 0 ; i < 10 ; ++i)
		{
			Herb.Construct(rand(0,gridSize),rand(0,gridSize));
			Herb.Construct(rand(0,gridSize),rand(0,gridSize));
			Carnivore.Construct(rand(5,10), rand(5,10), rand(0,gridSize),rand(0,gridSize), rand(male,female));
			Herbivore.Construct(rand(6,11), rand(5,10), rand(0,gridSize),rand(0,gridSize), rand(male,female));
		}
		time = 0;
	}
	
	Run()
	{
		++time;
		for agents a with(true)
		{
			int dist = MAXINT;
			Herbivore closestHerbi;
			for agents b with(b.type == Herbivore)
			{
				if(distanceBetween(a,b) < dist)
				{
					closestHerbi = b;
					dist = distanceBetween(a,b);
				}
			}
			// same for closest herb and carn
			move(closestHerbi,closestHerb,closestCarn);
		}
	}
}